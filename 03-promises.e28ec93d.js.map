{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,uBAC9BE,KAAMH,SAASC,cAAc,sBAC7BG,OAAQJ,SAASC,cAAc,yBAGjCH,EAAKC,KAAKM,iBAAiB,UAW3B,SAAkBC,GAChBA,EAAMC,iBAEN,IAAK,IAAIC,EAAI,EAAGA,EAAIC,EAAQD,IAAK,CAC/B,MAAME,EAAWF,EAAI,EACfG,EAAQC,OAAOC,GAAcC,EAAON,EAE1CO,EAAcL,EAAUC,GACrBK,MAAK,EAACC,SAAEA,EAAQf,MAAEA,MACjBgB,EAAAtB,GAASuB,OAAOC,QACd,uBAAqBH,QAAiBf,MAAU,IAGnDmB,OAAM,EAACJ,SAAEA,EAAQf,MAAEA,MAClBgB,EAAAtB,GAASuB,OAAOG,QACd,sBAAoBL,QAAef,MAAU,G,KAxBvDJ,EAAKI,MAAMqB,MAAQ,IACnB,MAAMV,EAAaf,EAAKI,MAAMqB,MAE9BzB,EAAKK,KAAKoB,MAAQ,KAClB,MAAMT,EAAOhB,EAAKK,KAAKoB,MAEvBzB,EAAKM,OAAOmB,MAAQ,EACpB,MAAMd,EAASX,EAAKM,OAAOmB,MAuB3B,SAASR,EAAcE,EAAUf,GAC/B,MAAMsB,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEX,E,MAAUf,IAEpB2B,EAAO,C,SAAEZ,E,MAAUf,GAAQ,GAE5BA,EAAM,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n};\n\nrefs.form.addEventListener('submit', onSubmit);\n\nrefs.delay.value = 1000;\nconst firstDelay = refs.delay.value;\n\nrefs.step.value = 1500;\nconst step = refs.step.value;\n\nrefs.amount.value = 3;\nconst amount = refs.amount.value;\n\nfunction onSubmit(event) {\n  event.preventDefault();\n\n  for (let i = 0; i < amount; i++) {\n    const position = i + 1;\n    const delay = Number(firstDelay) + step * i;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","delay","step","amount","addEventListener","event","preventDefault","i","$47d4ff9957288465$var$amount","position1","delay1","Number","$47d4ff9957288465$var$firstDelay","$47d4ff9957288465$var$step","$47d4ff9957288465$var$createPromise","then","position","$parcel$interopDefault","Notify","success","catch","failure","value","shouldResolve","Math","random","Promise","resolve","reject","setTimeout"],"version":3,"file":"03-promises.e28ec93d.js.map"}